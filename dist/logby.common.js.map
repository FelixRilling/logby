{"version":3,"file":"logby.common.js","sources":["esm/src/level/Levels.js","esm/src/appender/defaultLoggingAppender.js","esm/src/appender/delegatingAppender.js","../node_modules/lightdash/dist/esm/src/object/name.js","esm/src/level/matchesLevel.js","esm/src/logger/DefaultLogger.js","esm/src/Logby.js"],"sourcesContent":["/**\n * Default level-list. Can be used to set the level of a {@link Logby} instance.\n *\n * @public\n */\nconst Levels = {\n    NONE: {\n        val: -1\n    },\n    ERROR: {\n        name: \"ERROR\",\n        val: 0\n    },\n    WARN: {\n        name: \"WARN\",\n        val: 1\n    },\n    INFO: {\n        name: \"INFO\",\n        val: 2\n    },\n    DEBUG: {\n        name: \"DEBUG\",\n        val: 3\n    },\n    TRACE: {\n        name: \"TRACE\",\n        val: 4\n    }\n};\nexport { Levels };\n//# sourceMappingURL=Levels.js.map","import { Levels } from \"../level/Levels\";\n/**\n * Helper method for creating log entry prefix.\n *\n * @public\n * @param name Name of the logger instance.\n * @param level Level of the entry to log.\n * @returns Log entry prefix.\n */\nconst createDefaultLogPrefix = (name, level) => `${new Date().toISOString()} ${level.name} ${name}`;\n/**\n * Default appender, doing the actual logging.\n *\n * @public\n * @param name Name of the logger instance.\n * @param level Level of the entry to log.\n * @param args Arguments to log.\n */\nconst defaultLoggingAppender = (name, level, args) => {\n    let loggerFn = console.log;\n    if (level === Levels.ERROR) {\n        loggerFn = console.error;\n    }\n    else if (level === Levels.WARN) {\n        loggerFn = console.warn;\n    }\n    else if (level === Levels.INFO) {\n        loggerFn = console.info;\n    }\n    loggerFn(createDefaultLogPrefix(name, level), ...args);\n};\nexport { defaultLoggingAppender, createDefaultLogPrefix };\n//# sourceMappingURL=defaultLoggingAppender.js.map","const defaultDelegationNameProducer = (name) => `${name} (Delegated)`;\n/**\n * Creates a new delegatingAppender for the given target.\n * A delegatingAppender is an appender delegating all invocations to the given other {@link Logby} instance.\n *\n * @public\n * @param target Logby instance to delegate to.\n * @param nameProducer Function for calculating the new internal logger name.\n * @returns A delegating appender delegating to the given target.\n */\nconst createDelegatingAppender = (target, nameProducer = defaultDelegationNameProducer) => (name, level, args) => target.getLogger(nameProducer(name)).log(level, ...args);\nexport { createDelegatingAppender };\n//# sourceMappingURL=delegatingAppender.js.map","import { isObject, isString, isSymbol } from \"lodash\";\n/**\n * Gets name of a value.\n *\n * If the value has a name or description property, the value of that is returned.\n * If the value is a string, it is returned as is.\n * Otherwise null is returned.\n *\n * @since 10.2.0\n * @memberOf Object\n * @param value Value to check.\n * @returns The name of the value.\n * @example\n * name(class Foo{})\n * // => \"Foo\"\n *\n * name(function bar(){})\n * // => \"bar\"\n *\n * name(Symbol(\"abc\"))\n * // => \"abc\"\n *\n * name(\"foo\")\n * // => \"foo\"\n *\n * name(1)\n * // => null\n */\nconst name = (value) => {\n    if (isString(value)) {\n        return value;\n    }\n    // eslint-disable-next-line no-extra-parens\n    if (isObject(value) && isString(value.name)) {\n        // eslint-disable-next-line no-extra-parens\n        return value.name;\n    }\n    if (isSymbol(value) && isString(value.description)) {\n        return value.description;\n    }\n    return null;\n};\nexport { name };\n//# sourceMappingURL=name.js.map","/**\n * Checks if the given level is considered part of the active level.\n *\n * @private\n * @param incoming Level to check.\n * @param active level to check against.\n * @returns if the given level matches the active level.\n */\nconst matchesLevel = (incoming, active) => incoming.val <= active.val;\nexport { matchesLevel };\n//# sourceMappingURL=matchesLevel.js.map","import { Levels } from \"../level/Levels\";\nimport { matchesLevel } from \"../level/matchesLevel\";\n/**\n * Default {@link Logger} class.\n *\n * @private\n */\nclass DefaultLogger {\n    /**\n     * Creates a new {@link DefaultLogger}.\n     * Should not be constructed directly, rather use {@link Logby.getLogger}.\n     *\n     * @public\n     * @param root Root logger of this logger.\n     * @param name Name of the logger.\n     */\n    constructor(root, name) {\n        this.root = root;\n        this.name = name;\n    }\n    /**\n     * Logs a message.\n     *\n     * @public\n     * @param level Levels of the log.\n     * @param args Arguments to be logged.\n     */\n    log(level, ...args) {\n        if (this.root.level.val >= level.val) {\n            this.root.appenders.forEach(fn => fn(this.name, level, args));\n        }\n    }\n    /**\n     * Logs an error.\n     *\n     * @public\n     * @param args Arguments to be logged.\n     */\n    error(...args) {\n        this.log(Levels.ERROR, ...args);\n    }\n    /**\n     * Logs a warning.\n     *\n     * @public\n     * @param args Arguments to be logged.\n     */\n    warn(...args) {\n        this.log(Levels.WARN, ...args);\n    }\n    /**\n     * Logs an info.\n     *\n     * @public\n     * @param args Arguments to be logged.\n     */\n    info(...args) {\n        this.log(Levels.INFO, ...args);\n    }\n    /**\n     * Logs a debug message.\n     *\n     * @public\n     * @param args Arguments to be logged.\n     */\n    debug(...args) {\n        this.log(Levels.DEBUG, ...args);\n    }\n    /**\n     * Logs a trace message.\n     *\n     * @public\n     * @param args Arguments to be logged.\n     */\n    trace(...args) {\n        this.log(Levels.TRACE, ...args);\n    }\n    /**\n     * Checks if the currently set log level includes error logging.\n     *\n     * @public\n     * @returns if the currently set log level includes error logging.\n     */\n    isError() {\n        return matchesLevel(Levels.ERROR, this.root.level);\n    }\n    /**\n     * Checks if the currently set log level includes warning logging.\n     *\n     * @public\n     * @returns if the currently set log level includes warning logging.\n     */\n    isWarn() {\n        return matchesLevel(Levels.WARN, this.root.level);\n    }\n    /**\n     * Checks if the currently set log level includes info logging.\n     *\n     * @public\n     * @returns if the currently set log level includes info logging.\n     */\n    isInfo() {\n        return matchesLevel(Levels.INFO, this.root.level);\n    }\n    /**\n     * Checks if the currently set log level includes debug logging.\n     *\n     * @public\n     * @returns if the currently set log level includes debug logging.\n     */\n    isDebug() {\n        return matchesLevel(Levels.DEBUG, this.root.level);\n    }\n    /**\n     * Checks if the currently set log level includes trace logging.\n     *\n     * @public\n     * @returns if the currently set log level includes trace logging.\n     */\n    isTrace() {\n        return matchesLevel(Levels.TRACE, this.root.level);\n    }\n}\nexport { DefaultLogger };\n//# sourceMappingURL=DefaultLogger.js.map","import { name } from \"lightdash\";\nimport { defaultLoggingAppender } from \"./appender/defaultLoggingAppender\";\nimport { Levels } from \"./level/Levels\";\nimport { DefaultLogger } from \"./logger/DefaultLogger\";\n/**\n * Main logby class.\n */\nclass Logby {\n    /**\n     * Creates a new Logby instance.\n     */\n    constructor() {\n        this.loggers = new Map();\n        this.appenders = new Set([defaultLoggingAppender]);\n        this.level = Levels.INFO;\n    }\n    /**\n     * Gets and/or creates a logger instance.\n     *\n     * @param nameable String or INameable (ex: named class or named function).\n     * @returns The logger instance.\n     */\n    getLogger(nameable) {\n        const loggerName = name(nameable);\n        if (loggerName == null) {\n            throw new TypeError(`'${nameable}' is neither an INameable nor a string.`);\n        }\n        if (!this.loggers.has(loggerName)) {\n            const logger = new DefaultLogger(this, loggerName);\n            this.loggers.set(loggerName, logger);\n        }\n        return this.loggers.get(loggerName);\n    }\n}\nexport { Logby };\n//# sourceMappingURL=Logby.js.map"],"names":["isString","isObject","isSymbol"],"mappings":"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"}