var logby=function(n){"use strict";const t={NONE:{val:-1},ERROR:{name:"ERROR",val:0},WARN:{name:"WARN",val:1},INFO:{name:"INFO",val:2},DEBUG:{name:"DEBUG",val:3},TRACE:{name:"TRACE",val:4}},e=(n,t)=>typeof n===t,o=n=>null==n,i=n=>e(n,"string"),s=n=>!o(n)&&(e(n,"object")||e(n,"function")),l=(n,e,o)=>{let i=console.log;n===t.ERROR?i=console.error:n===t.WARN?i=console.warn:n===t.INFO&&(i=console.info);i(`${(new Date).toISOString()} ${n.name} ${e}`,...o)};class r{constructor(n,t){this.root=n,this.name=t}log(n,...t){this.root.getLevel().val>=n.val&&this.root.getAppenders().forEach(e=>e(n,this.name,t))}error(...n){this.log(t.ERROR,...n)}warn(...n){this.log(t.WARN,...n)}info(...n){this.log(t.INFO,...n)}debug(...n){this.log(t.DEBUG,...n)}trace(...n){this.log(t.TRACE,...n)}}class c{constructor(){this.loggers=new Map,this.appenders=new Map([["defaultAppender",l]]),this.level=t.INFO}getLogger(n){let t;if(s(n)&&"name"in n)t=n.name;else{if(!i(n))throw new TypeError(`'${n}' is neither an INameable nor a string.`);t=n}if(this.loggers.has(t))return this.loggers.get(t);const e=new r(this,t);return this.loggers.set(t,e),e}getLevel(){return this.level}setLevel(n){this.level=n}attachAppender(n,t){this.appenders.set(n,t)}detachAppender(n){this.appenders.delete(n)}getAppenders(){return this.appenders}}return n.Levels=t,n.Logby=c,n}({});
//# sourceMappingURL=logby.min.js.map
