var logby=function(n){"use strict";const t={NONE:{val:-1},ERROR:{name:"ERROR",val:0},WARN:{name:"WARN",val:1},INFO:{name:"INFO",val:2},DEBUG:{name:"DEBUG",val:3},TRACE:{name:"TRACE",val:4}},o=(n,t)=>typeof n===t,e=n=>null==n,i=n=>o(n,"string"),l=n=>!e(n)&&(o(n,"object")||o(n,"function")),s=(n,o,e)=>{const i=`${(new Date).toISOString()} ${n.name} ${o}`;let l=console.log;n===t.ERROR?l=console.error:n===t.WARN?l=console.warn:n===t.INFO&&(l=console.info);l(i,...e)};class a{constructor(n,t){this.root=n,this.name=t}log(n,...t){this.root.getLevel().val>=n.val&&this.root.appenderQueue.forEach(o=>o(n,this.name,t))}error(...n){this.log(t.ERROR,...n)}warn(...n){this.log(t.WARN,...n)}info(...n){this.log(t.INFO,...n)}debug(...n){this.log(t.DEBUG,...n)}trace(...n){this.log(t.TRACE,...n)}}class r{constructor(){this.loggerMap=new Map,this.level=t.INFO,this.appenderQueue=[s]}getLogger(n){let t;if(l(n)&&"name"in n)t=n.name;else{if(!i(n))throw new TypeError(`'${n}' is neither an INameable nor a string.`);t=n}if(this.loggerMap.has(t))return this.loggerMap.get(t);const o=new a(this,t);return this.loggerMap.set(t,o),o}getLevel(){return this.level}setLevel(n){this.level=n}}return n.Levels=t,n.Logby=r,n}({});
//# sourceMappingURL=logby.min.js.map
