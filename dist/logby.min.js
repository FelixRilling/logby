var logby=function(n){"use strict";const t={NONE:{val:-1},ERROR:{val:0,name:"ERROR"},WARN:{val:1,name:"WARN"},INFO:{val:2,name:"INFO"},DEBUG:{val:3,name:"DEBUG"},TRACE:{val:4,name:"TRACE"}},e=(n,t)=>typeof n===t,o=n=>e(n,"string");class i{constructor(n,t){this.root=n,this.name=t}log(n,...t){this.root.level.val>=n.val&&this.root.appenderQueue.forEach(e=>e(n,this.name,t))}error(...n){this.log(t.ERROR,n)}warn(...n){this.log(t.WARN,n)}info(...n){this.log(t.INFO,n)}debug(...n){this.log(t.DEBUG,n)}trace(...n){this.log(t.TRACE,n)}}const a=(n,t,e)=>console.log(`${(new Date).toISOString()} ${n.name} ${t} - ${e[0]}`,...e.slice(1));class s{constructor(n=t.INFO){this.loggerMap=new Map,this.level=n,this.appenderQueue=[a]}getLogger(n){let t;if("name"in n)t=n.name;else{if(!o(n))throw new TypeError(`'${n}' is neither an INameable nor a string.`);t=n}if(this.loggerMap.has(t))return this.loggerMap.get(t);const e=new i(this,t);return this.loggerMap.set(t,e),e}}return n.Level=t,n.Logby=s,n}({});
//# sourceMappingURL=logby.min.js.map
