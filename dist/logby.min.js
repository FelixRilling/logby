var logby=function(n){"use strict";const t={NONE:{val:-1},ERROR:{name:"ERROR",val:0},WARN:{name:"WARN",val:1},INFO:{name:"INFO",val:2},DEBUG:{name:"DEBUG",val:3},TRACE:{name:"TRACE",val:4}},e=(n,t)=>typeof n===t,o=n=>null==n,i=n=>e(n,"string"),a=n=>!o(n)&&(e(n,"object")||e(n,"function")),l=(n,t,e)=>console.log(`${(new Date).toISOString()} ${n.name} ${t}`,...e);class s{constructor(n,t){this.root=n,this.name=t}log(n,...t){this.root.level.val>=n.val&&this.root.appenderQueue.forEach(e=>e(n,this.name,t))}error(...n){this.log(t.ERROR,...n)}warn(...n){this.log(t.WARN,...n)}info(...n){this.log(t.INFO,...n)}debug(...n){this.log(t.DEBUG,...n)}trace(...n){this.log(t.TRACE,...n)}}class u{constructor(n=t.INFO){this.loggerMap=new Map,this.level=n,this.appenderQueue=[l]}getLogger(n){let t;if(a(n)&&"name"in n)t=n.name;else{if(!i(n))throw new TypeError(`'${n}' is neither an INameable nor a string.`);t=n}if(this.loggerMap.has(t))return this.loggerMap.get(t);const e=new s(this,t);return this.loggerMap.set(t,e),e}}return n.Level=t,n.Logby=u,n}({});
//# sourceMappingURL=logby.min.js.map
